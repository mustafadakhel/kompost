package com.mustafadakhel.kompost.lifecycle.activity

import androidx.activity.ComponentActivity
import com.mustafadakhel.kompost.android.application.ApplicationFarm
import com.mustafadakhel.kompost.android.application.applicationFarm
import com.mustafadakhel.kompost.core.DefaultProducer
import com.mustafadakhel.kompost.core.ProduceKey
import com.mustafadakhel.kompost.core.Producer
import com.mustafadakhel.kompost.core.kompostLogger
import com.mustafadakhel.kompost.core.producerOrNull
import com.mustafadakhel.kompost.lifecycle.KompostLifecycleDsl

/**
 * An extension property for [ApplicationFarm] that generates a [ProduceKey] for the root activities farm.
 * The [ProduceKey] is generated using the class of the [ApplicationFarm] and a tag which is the ID of the root activities farm.
 * The ID of the root activities farm is generated by the [rootActivitiesFarmId] extension property.
 *
 * @return The [ProduceKey] for the root activities farm.
 */
internal val ApplicationFarm.rootActivitiesFarmProduceKey: ProduceKey
    get() = ProduceKey(this::class, tag = rootActivitiesFarmId)

/**
 * An extension property for [ApplicationFarm] that generates the ID for the root activities farm.
 * The ID is generated by concatenating the name of the activities farm and the hash code of the [ApplicationFarm].
 *
 * @return The ID for the root activities farm.
 */
private val ApplicationFarm.rootActivitiesFarmId: String
    get() = "$ActivitiesFarmName.${this.hashCode()}"

/**
 * A constant that holds the name of the ActivitiesFarm.
 * This name is used as part of the unique identifier when generating a [ProduceKey] for the ApplicationRootActivitiesFarm.
 */
private const val ActivitiesFarmName = "ActivitiesFarm"

/**
 * A class that represents the root activities farm in the com.mustafadakhel.kompost.android.com.mustafadakhel.kompost.android.application.
 * It is a producer that delegates its production responsibilities to a [DefaultProducer].
 * The [DefaultProducer] is created with an ID that is the ID of the root activities farm in the [ApplicationFarm].
 * The [DefaultProducer] is also associated with the [ApplicationFarm] as its parent.
 *
 * @param applicationFarm The [ApplicationFarm] associated with this [RootActivitiesFarm].
 */
@KompostLifecycleDsl
public class RootActivitiesFarm internal constructor(
    applicationFarm: ApplicationFarm
) : Producer by DefaultProducer(id = applicationFarm.rootActivitiesFarmId, parent = applicationFarm)

/**
 * An extension function for [ApplicationFarm] that either retrieves the existing root activities farm or creates a new one.
 * The function first tries to retrieve the existing root activities farm using the [rootActivitiesFarmOrNull] function.
 * If the root activities farm does not exist, the function creates a new one using the [createActivitiesFarm] function.
 * The function takes a [productionScope] as a parameter, which is a lambda that defines the production scope of the root activities farm.
 * The [productionScope] is used when creating a new root activities farm.
 *
 * @param productionScope The lambda that defines the production scope of the root activities farm. Default value is an empty lambda.
 * @return The existing or newly created root activities farm.
 */
internal fun ApplicationFarm.getOrCreateActivitiesFarm(
    productionScope: RootActivitiesFarm.() -> Unit = {}
): RootActivitiesFarm {
    return rootActivitiesFarmOrNull() ?: createActivitiesFarm(productionScope)
}

/**
 * An extension function for [ApplicationFarm] that retrieves the existing root activities farm.
 * The function uses the [producerOrNull] function and the [rootActivitiesFarmProduceKey] extension property to retrieve the root activities farm.
 *
 * @return The existing root activities farm, or null if it does not exist.
 */
internal fun ApplicationFarm.rootActivitiesFarmOrNull(): RootActivitiesFarm? =
    producerOrNull(this, rootActivitiesFarmProduceKey)

/**
 * An extension function for [ComponentActivity] that retrieves the existing root activities farm.
 * The function first retrieves the [ApplicationFarm] associated with the com.mustafadakhel.kompost.android.com.mustafadakhel.kompost.android.application of the [ComponentActivity].
 * Then, it uses the [rootActivitiesFarmOrNull] extension function to retrieve the root activities farm.
 * If the root activities farm does not exist, the function throws an error.
 *
 * @return The existing root activities farm.
 * @throws IllegalStateException if the root activities farm does not exist.
 */
public fun ComponentActivity.rootActivitiesFarm(): RootActivitiesFarm {
    return application.applicationFarm().rootActivitiesFarmOrNull()
        ?: error("Activities farm not created")
}

/**
 * An exception that is thrown when an attempt is made to create a [RootActivitiesFarm] that already exists.
 */
public class RootActivitiesFarmAlreadyExistsException :
    IllegalStateException("Root activities farm already exists")

/**
 * An extension function for [ApplicationFarm] that creates a new root activities farm.
 * The function first checks if a root activities farm already exists using the [rootActivitiesFarmOrNull] function.
 * If a root activities farm already exists, the function throws an [RootActivitiesFarmAlreadyExistsException].
 * If a root activities farm does not exist, the function creates a new one using the [RootActivitiesFarm] constructor.
 * The function takes a [productionScope] as a parameter, which is a lambda that defines the production scope of the new root activities farm.
 * The [productionScope] is applied to the new root activities farm.
 * After creating the new root activities farm, the function produces it using the [Producer.produce] function and the [rootActivitiesFarmProduceKey] extension property.
 *
 * @param productionScope The lambda that defines the production scope of the new root activities farm. Default value is an empty lambda.
 * @return The newly created root activities farm.
 * @throws RootActivitiesFarmAlreadyExistsException if a root activities farm already exists.
 */
@KompostLifecycleDsl
public fun ApplicationFarm.createActivitiesFarm(
    productionScope: RootActivitiesFarm.() -> Unit = {}
): RootActivitiesFarm {
    if (rootActivitiesFarmOrNull() != null)
        throw RootActivitiesFarmAlreadyExistsException()
    kompostLogger.log("Creating root activities farm")
    return RootActivitiesFarm(this)
        .apply(productionScope)
        .also {
            val key = rootActivitiesFarmProduceKey
            produce(key) { it }
        }
}
